type Comment = record {
  id : nat64;
  content : text;
  user : text;
  created_at : nat64;
  message_id : nat64;
};
type Error = variant {
  AlreadyVoted : record { msg : text };
  NotFound : record { msg : text };
  UserNotFound : record { msg : text };
};
type Message = record {
  id : nat64;
  upvotes : nat64;
  title : text;
  updated_at : opt nat64;
  downvoted_users : vec text;
  body : text;
  created_at : nat64;
  upvoted_users : vec text;
  downvotes : nat64;
  attachment_url : text;
};
type MessagePayload = record {
  title : text;
  body : text;
  attachment_url : text;
};
type Report = record {
  id : nat64;
  reported_at : nat64;
  reported_by : text;
  reviewed : bool;
  message_id : nat64;
  reason : text;
};
type Result = variant { Ok : Comment; Err : Error };
type Result_1 = variant { Ok; Err : Error };
type Result_2 = variant { Ok : Message; Err : Error };
type Result_3 = variant { Ok : Report; Err : Error };
service : {
  add_comment : (nat64, text, text) -> (Result);
  add_message : (MessagePayload) -> (opt Message);
  delete_comment : (nat64) -> (Result_1);
  delete_message : (nat64) -> (Result_2);
  downvote_message : (nat64, text) -> (Result_1);
  get_comments : (nat64) -> (vec Comment) query;
  get_message : (nat64) -> (Result_2) query;
  report_message : (nat64, text, text) -> (Result_3);
  review_report : (nat64, text) -> (Result_1);
  reward_upvote : (text) -> (Result_1);
  search_messages : (opt text, opt nat64, opt nat64, opt nat64) -> (
      vec Message,
    ) query;
  update_message : (nat64, MessagePayload) -> (Result_2);
  upvote_message : (nat64, text) -> (Result_1);
}
